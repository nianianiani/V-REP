-- initilization:
n=1--stage
point=1--find 3 point pulse on line
upper_range_dum=sim.getObjectHandle('upper_range_dum')
u_upper_range_dum=sim.getObjectHandle('u_upper_range_dum')
F_max=0
joint={-1,-1,-1,-1,-1}
target_dum=sim.getObjectHandle("target_dum")
for i=1,5,1 do
    joint[i]=sim.getObjectHandle('joint'..i)
end
---
---
ori_target=sim.getObjectHandle("ori_target_pos")
ik_group=sim.getIkGroupHandle("ik_group")
ik_tip=sim.getObjectHandle("Follower_Tip")
ik_target=sim.getObjectHandle("Follower_Target")
-------------------------------------------------part related to ik1
xn=0
yn=0
zn=0
disc={}
for i=1,5,1 do
    disc[i]={}
    for j=1,5,1 do
        disc[i][j]=sim.getObjectHandle("Disc_"..i..j)
    end
    ---
end
----
----
pulse={-1,-1,-1}
dum={-1,-1,-1}
for i=1,3,1 do
    dum[i]=sim.getObjectHandle("dum"..i)
    pulse[i]=sim.getObjectHandle("pulse"..i)
end
---
---
---------------------------------------------------------------------
control_messages=0
---------------------------------------------------------------------
targetPosBack = {0,0,0,0,0,0}
---------------------------------------------------------------------------------
---RML var
vel=180*math.pi/180
accel=40*math.pi/180
jerk=80*math.pi/180
----------------------------numbers,need fix
currentVel={0,0,0,0,0,0}
currentAccel={0,0,0,0,0,0}
maxVel={vel,vel,vel,vel,vel,vel}
maxAccel={accel,accel,accel,accel,accel,accel}
maxJerk={jerk,jerk,jerk,jerk,jerk,jerk}
targetVel={0,0,0,0,0,0}
---------------------------------------------------
ikMaxVel={0.01,0.01,0.01,0.04}
ikMaxAccel={0.1,0.1,0.1,0.12}
ikMaxJerk={0.1,0.1,0.1,0.13}
-----------------------------RML
first_time=1
plane_vector={0,0,0}
pos_tar={0,0,0}
pos_ori={0,0,0}

enable_ik=function(enable)---here 'ik' means 'ik_target' movement
    if enable then
        sim.setObjectMatrix(ik_target,-1,sim.getObjectMatrix(ik_tip,-1))
        for i=1,#joint,1 do
            sim.setJointMode(joint[i],sim.jointmode_ik,1)
        end
        ----
        ----
        sim.setExplicitHandling(ik_group,0)
    else
        sim.setExplicitHandling(ik_group,1)
        for i=1,#joint,1 do
            sim.setJointMode(joint[i],sim.jointmode_force,0)
        end
        ----
        ----
    end
    -----
    -----
end
------
------
function find_biggest_pulse( )
F_max=sim.getFloatSignal("F_max")
------------------------------------------------compare value get F_max
end
----
----
function stage_of_press(stage)
local quateration={}
local position={}
    if(stage==1) then
    enable_ik(true)
    position=sim.getObjectPosition(target_dum,-1)
    quateration=sim.getObjectQuaternion(target_dum,-1)
    sim.rmlMoveToPosition(ik_target,-1,-1,nil,nil,ikMaxVel,ikMaxAccel,ikMaxJerk,{position[1],position[2],position[3]+0.0002},quateration,nil)
    elseif(stage==2) then
    enable_ik(true)
    position=sim.getObjectPosition(target_dum,-1)
    quateration=sim.getObjectQuaternion(target_dum,-1)
    sim.rmlMoveToPosition(ik_target,-1,-1,nil,nil,ikMaxVel,ikMaxAccel,ikMaxJerk,{position[1],position[2],position[3]+0.0000},quateration,nil)
    elseif(stage==3) then
    enable_ik(true)
    position=sim.getObjectPosition(target_dum,-1)
    quateration=sim.getObjectQuaternion(target_dum,-1)
    sim.rmlMoveToPosition(ik_target,-1,-1,nil,nil,ikMaxVel,ikMaxAccel,ikMaxJerk,{position[1],position[2],position[3]-0.0001},quateration,nil)
    elseif(stage==4) then
    enable_ik(true)
    position=sim.getObjectPosition(target_dum,-1)
    quateration=sim.getObjectQuaternion(target_dum,-1)
    sim.rmlMoveToPosition(ik_target,-1,-1,nil,nil,ikMaxVel,ikMaxAccel,ikMaxJerk,{position[1],position[2],position[3]-0.0002},quateration,nil)
    elseif(stage==5) then
    enable_ik(true)
    position=sim.getObjectPosition(target_dum,-1)
    quateration=sim.getObjectQuaternion(target_dum,-1)
    sim.rmlMoveToPosition(ik_target,-1,-1,nil,nil,ikMaxVel,ikMaxAccel,ikMaxJerk,{position[1],position[2],position[3]-0.0003},quateration,nil)
    elseif(stage==6) then
    enable_ik(true)
    position=sim.getObjectPosition(target_dum,-1)
    quateration=sim.getObjectQuaternion(target_dum,-1)
    sim.rmlMoveToPosition(ik_target,-1,-1,nil,nil,ikMaxVel,ikMaxAccel,ikMaxJerk,{position[1],position[2],position[3]-0.0004},quateration,nil)
    elseif(stage==7) then
    enable_ik(true)
    position=sim.getObjectPosition(target_dum,-1)
    quateration=sim.getObjectQuaternion(target_dum,-1)
    sim.rmlMoveToPosition(ik_target,-1,-1,nil,nil,ikMaxVel,ikMaxAccel,ikMaxJerk,{position[1],position[2],position[3]-0.0005},quateration,nil)
    elseif(stage==8) then
    enable_ik(true)
    position=sim.getObjectPosition(target_dum,-1)
    quateration=sim.getObjectQuaternion(target_dum,-1)
    sim.rmlMoveToPosition(ik_target,-1,-1,nil,nil,ikMaxVel,ikMaxAccel,ikMaxJerk,{position[1],position[2],position[3]-0.0006},quateration,nil)
    elseif(stage==9) then
    enable_ik(true)--inside function 
    position=sim.getObjectPosition(target_dum,-1)
    quateration=sim.getObjectQuaternion(target_dum,-1)
    sim.rmlMoveToPosition(ik_target,-1,-1,nil,nil,ikMaxVel,ikMaxAccel,ikMaxJerk,{position[1],position[2],position[3]-0.0007},quateration,nil)
    end
    --- 
    ---
end
----
----
function line_3_points(point)
local position={}
local quateration={}
if (point==1) then
  enable_ik(true)
  position=sim.getObjectPosition(dum[1],-1)
  quateration=sim.getObjectQuaternion(dum[1],-1)
  sim.rmlMoveToPosition(ik_target,-1,-1,nil,nil,ikMaxVel,ikMaxAccel,ikMaxJerk,{position[1],position[2],position[3]+0.004},quateration,nil)
elseif(point==2) then
  enable_ik(true)
  position=sim.getObjectPosition(dum[2],-1)
  quateration=sim.getObjectQuaternion(dum[2],-1)
  sim.rmlMoveToPosition(ik_target,-1,-1,nil,nil,ikMaxVel,ikMaxAccel,ikMaxJerk,{position[1],position[2],position[3]+0.004},quateration,nil)
elseif(point==3) then
  enable_ik(true)
  position=sim.getObjectPosition(dum[3],-1)
  quateration=sim.getObjectQuaternion(dum[3],-1)
  sim.rmlMoveToPosition(ik_target,-1,-1,nil,nil,ikMaxVel,ikMaxAccel,ikMaxJerk,{position[1],position[2],position[3]+0.004},quateration,nil)
end
----
----
end
-----
-----
function upper_pos( )
local position={}
local quteration={}
enable_ik(true)
position=sim.getObjectPosition(u_upper_range_dum,-1)
quateration=sim.getObjectQuaternion(u_upper_range_dum,-1)
sim.rmlMoveToPosition(ik_target,-1,-1,nil,nil,ikMaxVel,ikMaxAccel,ikMaxJerk,{position[1]+0.03,position[2],position[3]+0.03},quateration,nil)
sim.wait(2)
sim.rmlMoveToPosition(ik_target,-1,-1,nil,nil,ikMaxVel,ikMaxAccel,ikMaxJerk,{position[1]+0.02,position[2],position[3]+0.02},quateration,nil)
sim.wait(2)
-------------------------------------------------------------------------------------------------------------------------------------------------
position=sim.getObjectPosition(upper_range_dum,-1)
quateration=sim.getObjectQuaternion(upper_range_dum,-1)
sim.rmlMoveToPosition(ik_target,-1,-1,nil,nil,ikMaxVel,ikMaxAccel,ikMaxJerk,{position[1]+0.01,position[2],position[3]+0.01},quateration,nil)
sim.wait(2)
sim.rmlMoveToPosition(ik_target,-1,-1,nil,nil,ikMaxVel,ikMaxAccel,ikMaxJerk,{position[1],position[2],position[3]},quateration,nil)
sim.wait(2)
end
----
----
repeat 
  
  control_messages=sim.getIntegerSignal("self_moving")
  sim.clearIntegerSignal("control_messages")
  
  
-----------------------------------------------------------------
xn=0.006*math.random(-1,1)
yn=0
zn=0.006*math.random(-1,1)
zn=math.abs(zn)--make sure the first place range upstair of the target
if (control_messages==1) then
enable_ik(true)
pos=sim.getObjectPosition(target_dum,-1)
quat=sim.getObjectQuaternion(target_dum,-1)
if (first_time==1) then
sim.rmlMoveToPosition(ik_target,-1,-1,nil,nil,ikMaxVel,ikMaxAccel,ikMaxJerk,{pos[1]+0.05,pos[2],pos[3]+0.05},quat,nil)
--sim.wait(3)
--upper_pos( )
sim.rmlMoveToPosition(ik_target,-1,-1,nil,nil,ikMaxVel,ikMaxAccel,ikMaxJerk,{pos[1]+0.01,pos[2],pos[3]+0.02},quat,nil)
--sim.wait(2)
sim.rmlMoveToPosition(ik_target,-1,-1,nil,nil,ikMaxVel,ikMaxAccel,ikMaxJerk,{pos[1]+0.005,pos[2],pos[3]+0.005},quat,nil)
--sim.wait(2)
sim.rmlMoveToPosition(ik_target,-1,-1,nil,nil,ikMaxVel,ikMaxAccel,ikMaxJerk,{pos[1]+0.002,pos[2],pos[3]+0.002},quat,nil)
--sim.wait(2)
sim.rmlMoveToPosition(ik_target,-1,-1,nil,nil,ikMaxVel,ikMaxAccel,ikMaxJerk,{pos[1]+xn,pos[2]+yn,pos[3]+zn},quat,nil)
--sim.wait(2)
first_time=0
-------------------first time find the place range,this is a random postion but little range.
end
----
----
-----------------------------------------------------------------------------------------
    repeat
        
        find_biggest_pulse( )
        n=n+1
        stage_of_press(n)
        sim.wait(5)
        if n==9 then n=1 end
    until(F_max>1.5 and F_max<2)



end
------
------

sim.switchThread()
until(false)
sim.setThreadSwitchTiming(200) -- set the thread switch timing to the maximum (200 milliseconds)
